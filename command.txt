
cmera-photo:
gst-launch-1.0 libcamerasrc !   videoconvert ! tee name=t t. !  jpegenc !   multifilesink location=capture_%05d.jpg max-files=1

cameara-display:
gst-launch-1.0 multifilesrc location="captur2.jpg" index=0 caps="image/jpeg,framerate=30/1" ! jpegdec ! videoconvert ! autovideosink

camera-record stream:
DISPLAY=:0 gst-launch-1.0 libcamerasrc ! video/x-raw,width=640,height=480,framerate=30/1 ! videoconvert ! tee name=t t. ! queue max-size-buffers=30 leaky=downstream ! jpegenc ! filesink location=cap.jpg t. ! queue ! autovideosink
camera-streamtovideo:
gst-launch-1.0 -e filesrc location=capture1.jpg ! jpegdec ! videoconvert !   videorate ! video/x-raw,framerate=30/1 ! x264enc ! mp4mux ! filesink location=output1.gif

DISPLAY=:0 gst-launch-1.0 libcamerasrc ! video/x-raw,width=320,height=240,framerate=15/1 ! videoconvert ! video/x-raw,format=RGBA ! glupload ! gltransformation scale-x=1.5 scale-y=1.5 ! glimagesink
DISPLAY=:0 gst-launch-1.0 libcamerasrc ! video/x-raw,width=1280,height=720,framerate=30/1 ! videoconvert ! autovideosink

gst-launch-1.0 -e libcamerasrc ! video/x-raw,width=1920,height=1080,framerate=30/1 ! videorate ! videoconvert ! x264enc tune=zerolatency bitrate=5000 speed-preset=superfast ! h264parse ! mp4mux ! filesink location=video.mp4 -e
gst-launch-1.0 libcamerasrc ! video/x-raw,width=1920,height=1080,framerate=30/1 ! videoconvert ! x264enc tune=zerolatency bitrate=10000 speed-preset=superfast ! h264parse ! mp4mux ! filesink location=videod334567.mp4 -e
import sys
import subprocess
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QVBoxLayout
from PyQt5.QtGui import QPixmap

class CameraApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("RPiCam Capture")
        self.layout = QVBoxLayout()

        self.capture_btn = QPushButton("Capture Now")
        self.capture_btn.clicked.connect(self.capture_image)
        self.layout.addWidget(self.capture_btn)

        self.image_label = QLabel("No image yet")
        self.layout.addWidget(self.image_label)

        self.setLayout(self.layout)

    def capture_image(self):
        # Run rpicam-jpeg instantly, no delay (-t 0)
        subprocess.run(["DISPLAY=:0", "rpicam-jpeg", "-t", "0", "-o", "capture.jpg"], shell=True)

        # Load and display the image
        pixmap = QPixmap("capture.jpg").scaled(640, 480)
        self.image_label.setPixmap(pixmap)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = CameraApp()
    window.show()
    sys.exit(app.exec_())

